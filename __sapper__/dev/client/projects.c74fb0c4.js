import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as compute_rest_props, v as validate_slots, p as assign, r as exclude_internal_props, u as classnames, w as empty, l as insert_dev, x as group_outros, y as transition_out, z as check_outros, A as transition_in, b as detach_dev, B as create_slot, e as element, f as claim_element, g as children, C as set_attributes, k as add_location, D as update_slot, E as get_spread_update, n as noop, a as space, F as create_component, t as text, q as query_selector_all, c as claim_space, G as claim_component, h as claim_text, j as attr_dev, H as mount_component, m as append_dev, I as destroy_component } from './client.8323508c.js';

/* node_modules/sveltestrap/src/Media.svelte generated by Svelte v3.24.1 */
const file = "node_modules/sveltestrap/src/Media.svelte";

// (56:0) {:else}
function create_else_block(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	let div_levels = [/*$$restProps*/ ctx[7], { class: /*classes*/ ctx[6] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file, 56, 2, 1190);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*classes*/ 64) && { class: /*classes*/ ctx[6] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(56:0) {:else}",
		ctx
	});

	return block;
}

// (52:15) 
function create_if_block_3(ctx) {
	let ul;
	let current;
	const default_slot_template = /*$$slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	let ul_levels = [/*$$restProps*/ ctx[7], { class: /*classes*/ ctx[6] }];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	const block = {
		c: function create() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			if (default_slot) default_slot.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(ul, ul_data);
			add_location(ul, file, 52, 2, 1121);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*classes*/ 64) && { class: /*classes*/ ctx[6] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(52:15) ",
		ctx
	});

	return block;
}

// (50:24) 
function create_if_block_2(ctx) {
	let img;
	let img_src_value;

	let img_levels = [
		/*$$restProps*/ ctx[7],
		{ class: /*classes*/ ctx[6] },
		{ src: img_src_value = /*src*/ ctx[4] },
		{ alt: /*alt*/ ctx[5] }
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			set_attributes(img, img_data);
			add_location(img, file, 50, 2, 1050);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			set_attributes(img, img_data = get_spread_update(img_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				dirty & /*classes*/ 64 && { class: /*classes*/ ctx[6] },
				dirty & /*src*/ 16 && img.src !== (img_src_value = /*src*/ ctx[4]) && { src: img_src_value },
				dirty & /*alt*/ 32 && { alt: /*alt*/ ctx[5] }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(50:24) ",
		ctx
	});

	return block;
}

// (46:15) 
function create_if_block_1(ctx) {
	let a;
	let current;
	const default_slot_template = /*$$slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);

	let a_levels = [
		/*$$restProps*/ ctx[7],
		{ class: /*classes*/ ctx[6] },
		{ href: /*href*/ ctx[3] }
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			if (default_slot) default_slot.l(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(a, a_data);
			add_location(a, file, 46, 2, 959);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*classes*/ 64) && { class: /*classes*/ ctx[6] },
				(!current || dirty & /*href*/ 8) && { href: /*href*/ ctx[3] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(46:15) ",
		ctx
	});

	return block;
}

// (42:0) {#if heading}
function create_if_block(ctx) {
	let h4;
	let current;
	const default_slot_template = /*$$slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	let h4_levels = [/*$$restProps*/ ctx[7], { class: /*classes*/ ctx[6] }];
	let h4_data = {};

	for (let i = 0; i < h4_levels.length; i += 1) {
		h4_data = assign(h4_data, h4_levels[i]);
	}

	const block = {
		c: function create() {
			h4 = element("h4");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			h4 = claim_element(nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			if (default_slot) default_slot.l(h4_nodes);
			h4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(h4, h4_data);
			add_location(h4, file, 42, 2, 882);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);

			if (default_slot) {
				default_slot.m(h4, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			}

			set_attributes(h4, h4_data = get_spread_update(h4_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*classes*/ 64) && { class: /*classes*/ ctx[6] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h4);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(42:0) {#if heading}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	const if_block_creators = [
		create_if_block,
		create_if_block_1,
		create_if_block_2,
		create_if_block_3,
		create_else_block
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*heading*/ ctx[0]) return 0;
		if (/*href*/ ctx[3]) return 1;
		if (/*src*/ ctx[4] || /*object*/ ctx[2]) return 2;
		if (/*list*/ ctx[1]) return 3;
		return 4;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"class","body","bottom","heading","left","list","middle","object","right","top","href","src","alt"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { class: className = "" } = $$props;
	let { body = false } = $$props;
	let { bottom = false } = $$props;
	let { heading = false } = $$props;
	let { left = false } = $$props;
	let { list = false } = $$props;
	let { middle = false } = $$props;
	let { object = false } = $$props;
	let { right = false } = $$props;
	let { top = false } = $$props;
	let { href = "" } = $$props;
	let { src = "" } = $$props;
	let { alt = "" } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Media", $$slots, ['default']);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(8, className = $$new_props.class);
		if ("body" in $$new_props) $$invalidate(9, body = $$new_props.body);
		if ("bottom" in $$new_props) $$invalidate(10, bottom = $$new_props.bottom);
		if ("heading" in $$new_props) $$invalidate(0, heading = $$new_props.heading);
		if ("left" in $$new_props) $$invalidate(11, left = $$new_props.left);
		if ("list" in $$new_props) $$invalidate(1, list = $$new_props.list);
		if ("middle" in $$new_props) $$invalidate(12, middle = $$new_props.middle);
		if ("object" in $$new_props) $$invalidate(2, object = $$new_props.object);
		if ("right" in $$new_props) $$invalidate(13, right = $$new_props.right);
		if ("top" in $$new_props) $$invalidate(14, top = $$new_props.top);
		if ("href" in $$new_props) $$invalidate(3, href = $$new_props.href);
		if ("src" in $$new_props) $$invalidate(4, src = $$new_props.src);
		if ("alt" in $$new_props) $$invalidate(5, alt = $$new_props.alt);
		if ("$$scope" in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		body,
		bottom,
		heading,
		left,
		list,
		middle,
		object,
		right,
		top,
		href,
		src,
		alt,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ("className" in $$props) $$invalidate(8, className = $$new_props.className);
		if ("body" in $$props) $$invalidate(9, body = $$new_props.body);
		if ("bottom" in $$props) $$invalidate(10, bottom = $$new_props.bottom);
		if ("heading" in $$props) $$invalidate(0, heading = $$new_props.heading);
		if ("left" in $$props) $$invalidate(11, left = $$new_props.left);
		if ("list" in $$props) $$invalidate(1, list = $$new_props.list);
		if ("middle" in $$props) $$invalidate(12, middle = $$new_props.middle);
		if ("object" in $$props) $$invalidate(2, object = $$new_props.object);
		if ("right" in $$props) $$invalidate(13, right = $$new_props.right);
		if ("top" in $$props) $$invalidate(14, top = $$new_props.top);
		if ("href" in $$props) $$invalidate(3, href = $$new_props.href);
		if ("src" in $$props) $$invalidate(4, src = $$new_props.src);
		if ("alt" in $$props) $$invalidate(5, alt = $$new_props.alt);
		if ("classes" in $$props) $$invalidate(6, classes = $$new_props.classes);
	};

	let classes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, body, heading, left, right, top, bottom, middle, object, list*/ 32519) {
			 $$invalidate(6, classes = classnames(className, {
				"media-body": body,
				"media-heading": heading,
				"media-left": left,
				"media-right": right,
				"media-top": top,
				"media-bottom": bottom,
				"media-middle": middle,
				"media-object": object,
				"media-list": list,
				media: !body && !heading && !left && !right && !top && !bottom && !middle && !object && !list
			}));
		}
	};

	return [
		heading,
		list,
		object,
		href,
		src,
		alt,
		classes,
		$$restProps,
		className,
		body,
		bottom,
		left,
		middle,
		right,
		top,
		$$scope,
		$$slots
	];
}

class Media extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 8,
			body: 9,
			bottom: 10,
			heading: 0,
			left: 11,
			list: 1,
			middle: 12,
			object: 2,
			right: 13,
			top: 14,
			href: 3,
			src: 4,
			alt: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Media",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get body() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set body(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bottom() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bottom(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get heading() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set heading(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get left() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set left(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get list() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set list(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get middle() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set middle(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get object() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set object(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get right() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set right(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get top() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set top(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get src() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/projects.svelte generated by Svelte v3.24.1 */
const file$1 = "src/routes/projects.svelte";

// (37:2) <Media left href="https://github.com/ajzdunek/Space_Shooter" target="_blank" rel="noopener noreferrer">
function create_default_slot_31(ctx) {
	let media;
	let current;

	media = new Media({
			props: {
				object: true,
				src: "./images/space-shooter.png",
				alt: "Python Space Shooter"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(37:2) <Media left href=\\\"https://github.com/ajzdunek/Space_Shooter\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">",
		ctx
	});

	return block;
}

// (44:4) <Media heading>
function create_default_slot_30(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("python_space_shooter");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "python_space_shooter");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(44:4) <Media heading>",
		ctx
	});

	return block;
}

// (43:2) <Media body>
function create_default_slot_29(ctx) {
	let media;
	let t;
	let current;

	media = new Media({
			props: {
				heading: true,
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
			t = text("\n    Making a Space Shooter with Python and Pygame.");
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
			t = claim_text(nodes, "\n    Making a Space Shooter with Python and Pygame.");
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media_changes.$$scope = { dirty, ctx };
			}

			media.$set(media_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(43:2) <Media body>",
		ctx
	});

	return block;
}

// (35:0) <Media>
function create_default_slot_28(ctx) {
	let div;
	let media0;
	let t;
	let media1;
	let current;

	media0 = new Media({
			props: {
				left: true,
				href: "https://github.com/ajzdunek/Space_Shooter",
				target: "_blank",
				rel: "noopener noreferrer",
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(media0.$$.fragment);
			t = space();
			create_component(media1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(media0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(media1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container py-3");
			add_location(div, file$1, 35, 0, 415);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(media0, div, null);
			append_dev(div, t);
			mount_component(media1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(media0);
			destroy_component(media1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(35:0) <Media>",
		ctx
	});

	return block;
}

// (54:2) <Media left href="https://github.com/ajzdunek/python_animations" target="_blank" rel="noopener noreferrer">
function create_default_slot_27(ctx) {
	let media;
	let current;

	media = new Media({
			props: {
				object: true,
				src: "./images/python-animations.png",
				alt: "Python Animations"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(54:2) <Media left href=\\\"https://github.com/ajzdunek/python_animations\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">",
		ctx
	});

	return block;
}

// (61:4) <Media heading>
function create_default_slot_26(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("python_animations");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "python_animations");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(61:4) <Media heading>",
		ctx
	});

	return block;
}

// (60:2) <Media body>
function create_default_slot_25(ctx) {
	let media;
	let t;
	let current;

	media = new Media({
			props: {
				heading: true,
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
			t = text("\n    Making Python animations and using Pygame.");
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
			t = claim_text(nodes, "\n    Making Python animations and using Pygame.");
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media_changes.$$scope = { dirty, ctx };
			}

			media.$set(media_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(60:2) <Media body>",
		ctx
	});

	return block;
}

// (52:0) <Media>
function create_default_slot_24(ctx) {
	let div;
	let media0;
	let t;
	let media1;
	let current;

	media0 = new Media({
			props: {
				left: true,
				href: "https://github.com/ajzdunek/python_animations",
				target: "_blank",
				rel: "noopener noreferrer",
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(media0.$$.fragment);
			t = space();
			create_component(media1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(media0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(media1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container py-3");
			add_location(div, file$1, 52, 0, 836);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(media0, div, null);
			append_dev(div, t);
			mount_component(media1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(media0);
			destroy_component(media1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(52:0) <Media>",
		ctx
	});

	return block;
}

// (71:2) <Media left href="https://www.wastedwish.com/" target="_blank" rel="noopener noreferrer">
function create_default_slot_23(ctx) {
	let media;
	let current;

	media = new Media({
			props: {
				object: true,
				src: "./images/wasted-wish.png",
				alt: "Wasted Wish Website"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(71:2) <Media left href=\\\"https://www.wastedwish.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">",
		ctx
	});

	return block;
}

// (78:4) <Media heading>
function create_default_slot_22(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Wasted Wish");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Wasted Wish");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(78:4) <Media heading>",
		ctx
	});

	return block;
}

// (77:2) <Media body>
function create_default_slot_21(ctx) {
	let media;
	let t0;
	let p0;
	let t1;
	let t2;
	let p1;
	let t3;
	let current;

	media = new Media({
			props: {
				heading: true,
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
			t0 = space();
			p0 = element("p");
			t1 = text("Creating a band website in Jekyll (a static site generator built in Ruby) that mixes a touch of both minimalism and brutalism. This music project is no longer active");
			t2 = space();
			p1 = element("p");
			t3 = text("Technologies used - HTML5, CSS, Bootstrap 4, JavaScript, Getform.");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
			t0 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "Creating a band website in Jekyll (a static site generator built in Ruby) that mixes a touch of both minimalism and brutalism. This music project is no longer active");
			p0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "Technologies used - HTML5, CSS, Bootstrap 4, JavaScript, Getform.");
			p1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file$1, 78, 2, 1539);
			add_location(p1, file$1, 80, 2, 1715);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t3);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media_changes.$$scope = { dirty, ctx };
			}

			media.$set(media_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(77:2) <Media body>",
		ctx
	});

	return block;
}

// (69:0) <Media>
function create_default_slot_20(ctx) {
	let div;
	let media0;
	let t;
	let media1;
	let current;

	media0 = new Media({
			props: {
				left: true,
				href: "https://www.wastedwish.com/",
				target: "_blank",
				rel: "noopener noreferrer",
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(media0.$$.fragment);
			t = space();
			create_component(media1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(media0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(media1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container py-3");
			add_location(div, file$1, 69, 0, 1255);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(media0, div, null);
			append_dev(div, t);
			mount_component(media1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(media0);
			destroy_component(media1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(69:0) <Media>",
		ctx
	});

	return block;
}

// (92:2) <Media left href="https://www.elementaj.com/" target="_blank" rel="noopener noreferrer">
function create_default_slot_19(ctx) {
	let media;
	let current;

	media = new Media({
			props: {
				object: true,
				src: "./images/elementaj-website.png",
				alt: "Elementaj"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(92:2) <Media left href=\\\"https://www.elementaj.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">",
		ctx
	});

	return block;
}

// (99:4) <Media heading>
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Elementaj");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Elementaj");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(99:4) <Media heading>",
		ctx
	});

	return block;
}

// (98:2) <Media body>
function create_default_slot_17(ctx) {
	let media;
	let t0;
	let p0;
	let t1;
	let strong;
	let t2;
	let t3;
	let p1;
	let t4;
	let current;

	media = new Media({
			props: {
				heading: true,
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
			t0 = space();
			p0 = element("p");
			t1 = text("Creating a website for my current band Elementaj using Jekyll for its blog post feature, Bootstrap 4.1.3, Songkick tour widget, and MailChimp. ");
			strong = element("strong");
			t2 = text("(This repository is marked as private on GitHub)");
			t3 = space();
			p1 = element("p");
			t4 = text("Technologies used - HTML5, CSS, JQuery, Bootstrap 4, JavaScript, MailChimp");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
			t0 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "Creating a website for my current band Elementaj using Jekyll for its blog post feature, Bootstrap 4.1.3, Songkick tour widget, and MailChimp. ");
			strong = claim_element(p0_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t2 = claim_text(strong_nodes, "(This repository is marked as private on GitHub)");
			strong_nodes.forEach(detach_dev);
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "Technologies used - HTML5, CSS, JQuery, Bootstrap 4, JavaScript, MailChimp");
			p1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(strong, file$1, 99, 150, 2277);
			add_location(p0, file$1, 99, 4, 2131);
			add_location(p1, file$1, 101, 6, 2354);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t1);
			append_dev(p0, strong);
			append_dev(strong, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t4);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media_changes.$$scope = { dirty, ctx };
			}

			media.$set(media_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(98:2) <Media body>",
		ctx
	});

	return block;
}

// (90:0) <Media>
function create_default_slot_16(ctx) {
	let div;
	let media0;
	let t;
	let media1;
	let current;

	media0 = new Media({
			props: {
				left: true,
				href: "https://www.elementaj.com/",
				target: "_blank",
				rel: "noopener noreferrer",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(media0.$$.fragment);
			t = space();
			create_component(media1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(media0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(media1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container py-3");
			add_location(div, file$1, 90, 0, 1852);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(media0, div, null);
			append_dev(div, t);
			mount_component(media1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(media0);
			destroy_component(media1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(90:0) <Media>",
		ctx
	});

	return block;
}

// (113:2) <Media left href="https://silversail.net/" target="_blank" rel="noopener noreferrer">
function create_default_slot_15(ctx) {
	let media;
	let current;

	media = new Media({
			props: {
				object: true,
				src: "./images/silver-sail.png",
				alt: "Silver Sail"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(113:2) <Media left href=\\\"https://silversail.net/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">",
		ctx
	});

	return block;
}

// (120:4) <Media heading>
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Silver Sail");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Silver Sail");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(120:4) <Media heading>",
		ctx
	});

	return block;
}

// (119:2) <Media body>
function create_default_slot_13(ctx) {
	let media;
	let t0;
	let p0;
	let t1;
	let t2;
	let p1;
	let t3;
	let current;

	media = new Media({
			props: {
				heading: true,
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
			t0 = space();
			p0 = element("p");
			t1 = text("Creating a simple static band website using.  I am no longer the bass player for this project but still maintain the website for the band.");
			t2 = space();
			p1 = element("p");
			t3 = text("Technologies used - HTML5, CSS, Bootstrap 4.1.3, JavaScript and Bandsintown events widget");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
			t0 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "Creating a simple static band website using.  I am no longer the bass player for this project but still maintain the website for the band.");
			p0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "Technologies used - HTML5, CSS, Bootstrap 4.1.3, JavaScript and Bandsintown events widget");
			p1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file$1, 120, 4, 2774);
			add_location(p1, file$1, 122, 4, 2925);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t3);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media_changes.$$scope = { dirty, ctx };
			}

			media.$set(media_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(119:2) <Media body>",
		ctx
	});

	return block;
}

// (111:0) <Media>
function create_default_slot_12(ctx) {
	let div;
	let media0;
	let t;
	let media1;
	let current;

	media0 = new Media({
			props: {
				left: true,
				href: "https://silversail.net/",
				target: "_blank",
				rel: "noopener noreferrer",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(media0.$$.fragment);
			t = space();
			create_component(media1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(media0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(media1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container py-3");
			add_location(div, file$1, 111, 0, 2500);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(media0, div, null);
			append_dev(div, t);
			mount_component(media1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(media0);
			destroy_component(media1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(111:0) <Media>",
		ctx
	});

	return block;
}

// (133:2) <Media left href="https://music404.com/" target="_blank" rel="noopener noreferrer">
function create_default_slot_11(ctx) {
	let media;
	let current;

	media = new Media({
			props: {
				object: true,
				src: "./images/music404.png",
				alt: "Music404 Blog"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(133:2) <Media left href=\\\"https://music404.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">",
		ctx
	});

	return block;
}

// (140:4) <Media heading>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Music404");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Music404");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(140:4) <Media heading>",
		ctx
	});

	return block;
}

// (139:2) <Media body>
function create_default_slot_9(ctx) {
	let media;
	let t0;
	let p0;
	let t1;
	let t2;
	let p1;
	let t3;
	let t4;
	let current;

	media = new Media({
			props: {
				heading: true,
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
			t0 = space();
			p0 = element("p");
			t1 = text("A fully functional independent music blog built with Jekyll, a blog-aware, static site generator written in Ruby. One of the features I'm proud of in this project was the ability to add search functionality so you can search for yours or your friends band.");
			t2 = space();
			p1 = element("p");
			t3 = text("Technologies used - HTML5, CSS, Bootstrap 4, JavaScript, Getform.");
			t4 = text("\n\n    The nice-to-haves that I'm working on currently is the mapping details to add more authors.");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
			t0 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "A fully functional independent music blog built with Jekyll, a blog-aware, static site generator written in Ruby. One of the features I'm proud of in this project was the ability to add search functionality so you can search for yours or your friends band.");
			p0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "Technologies used - HTML5, CSS, Bootstrap 4, JavaScript, Getform.");
			p1_nodes.forEach(detach_dev);
			t4 = claim_text(nodes, "\n\n    The nice-to-haves that I'm working on currently is the mapping details to add more authors.");
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file$1, 140, 4, 3353);
			add_location(p1, file$1, 142, 4, 3622);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t3);
			insert_dev(target, t4, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media_changes.$$scope = { dirty, ctx };
			}

			media.$set(media_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(139:2) <Media body>",
		ctx
	});

	return block;
}

// (131:0) <Media>
function create_default_slot_8(ctx) {
	let div;
	let media0;
	let t;
	let media1;
	let current;

	media0 = new Media({
			props: {
				left: true,
				href: "https://music404.com/",
				target: "_blank",
				rel: "noopener noreferrer",
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(media0.$$.fragment);
			t = space();
			create_component(media1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(media0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(media1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container py-3");
			add_location(div, file$1, 131, 0, 3085);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(media0, div, null);
			append_dev(div, t);
			mount_component(media1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(media0);
			destroy_component(media1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(131:0) <Media>",
		ctx
	});

	return block;
}

// (156:2) <Media left href="https://github.com/ajzdunek/Sonic-Pi" target="_blank" rel="noopener noreferrer">
function create_default_slot_7(ctx) {
	let media;
	let current;

	media = new Media({
			props: {
				object: true,
				src: "./images/sonic-pi-web-logo.png",
				alt: "Sonic Pi"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(156:2) <Media left href=\\\"https://github.com/ajzdunek/Sonic-Pi\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">",
		ctx
	});

	return block;
}

// (163:4) <Media heading>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Drum machine beats programmed with Sonic Pi");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Drum machine beats programmed with Sonic Pi");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(163:4) <Media heading>",
		ctx
	});

	return block;
}

// (162:2) <Media body>
function create_default_slot_5(ctx) {
	let media;
	let t;
	let current;

	media = new Media({
			props: {
				heading: true,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
			t = text("\n    No physical drum machines, synths, keyboards, effects, etc. - just code.");
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
			t = claim_text(nodes, "\n    No physical drum machines, synths, keyboards, effects, etc. - just code.");
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media_changes.$$scope = { dirty, ctx };
			}

			media.$set(media_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(162:2) <Media body>",
		ctx
	});

	return block;
}

// (154:0) <Media>
function create_default_slot_4(ctx) {
	let div;
	let media0;
	let t;
	let media1;
	let current;

	media0 = new Media({
			props: {
				left: true,
				href: "https://github.com/ajzdunek/Sonic-Pi",
				target: "_blank",
				rel: "noopener noreferrer",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(media0.$$.fragment);
			t = space();
			create_component(media1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(media0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(media1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container py-3");
			add_location(div, file$1, 154, 0, 3856);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(media0, div, null);
			append_dev(div, t);
			mount_component(media1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(media0);
			destroy_component(media1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(154:0) <Media>",
		ctx
	});

	return block;
}

// (173:2) <Media left href="https://distracted-easley-9e2792.netlify.app/" target="_blank" rel="noopener noreferrer">
function create_default_slot_3(ctx) {
	let media;
	let current;

	media = new Media({
			props: {
				object: true,
				src: "./images/a-to-z-recipe-search.png",
				alt: "Sonic Pi"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(173:2) <Media left href=\\\"https://distracted-easley-9e2792.netlify.app/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">",
		ctx
	});

	return block;
}

// (180:4) <Media heading>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A to Z Recipe Search");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A to Z Recipe Search");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(180:4) <Media heading>",
		ctx
	});

	return block;
}

// (179:2) <Media body>
function create_default_slot_1(ctx) {
	let media;
	let t;
	let current;

	media = new Media({
			props: {
				heading: true,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
			t = text("\n    Creating a recipes app using React, reactstrap, Bootstrap ver. 4+ and the Edamam Recipe Search API");
		},
		l: function claim(nodes) {
			claim_component(media.$$.fragment, nodes);
			t = claim_text(nodes, "\n    Creating a recipes app using React, reactstrap, Bootstrap ver. 4+ and the Edamam Recipe Search API");
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media_changes.$$scope = { dirty, ctx };
			}

			media.$set(media_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(179:2) <Media body>",
		ctx
	});

	return block;
}

// (171:0) <Media>
function create_default_slot(ctx) {
	let div;
	let media0;
	let t;
	let media1;
	let current;

	media0 = new Media({
			props: {
				left: true,
				href: "https://distracted-easley-9e2792.netlify.app/",
				target: "_blank",
				rel: "noopener noreferrer",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				body: true,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(media0.$$.fragment);
			t = space();
			create_component(media1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(media0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(media1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container py-3");
			add_location(div, file$1, 171, 0, 4313);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(media0, div, null);
			append_dev(div, t);
			mount_component(media1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(media0);
			destroy_component(media1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(171:0) <Media>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let br;
	let t1;
	let media0;
	let t2;
	let hr0;
	let t3;
	let media1;
	let t4;
	let hr1;
	let t5;
	let media2;
	let t6;
	let hr2;
	let t7;
	let media3;
	let t8;
	let hr3;
	let t9;
	let media4;
	let t10;
	let hr4;
	let t11;
	let media5;
	let t12;
	let hr5;
	let t13;
	let media6;
	let t14;
	let hr6;
	let t15;
	let media7;
	let t16;
	let hr7;
	let t17;
	let div1;
	let footer;
	let t18;
	let t19;
	let div0;
	let a0;
	let i0;
	let t20;
	let a1;
	let i1;
	let t21;
	let a2;
	let i2;
	let t22;
	let a3;
	let i3;
	let current;

	media0 = new Media({
			props: {
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media1 = new Media({
			props: {
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media2 = new Media({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media3 = new Media({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media4 = new Media({
			props: {
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media5 = new Media({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media6 = new Media({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	media7 = new Media({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			br = element("br");
			t1 = space();
			create_component(media0.$$.fragment);
			t2 = space();
			hr0 = element("hr");
			t3 = space();
			create_component(media1.$$.fragment);
			t4 = space();
			hr1 = element("hr");
			t5 = space();
			create_component(media2.$$.fragment);
			t6 = space();
			hr2 = element("hr");
			t7 = space();
			create_component(media3.$$.fragment);
			t8 = space();
			hr3 = element("hr");
			t9 = space();
			create_component(media4.$$.fragment);
			t10 = space();
			hr4 = element("hr");
			t11 = space();
			create_component(media5.$$.fragment);
			t12 = space();
			hr5 = element("hr");
			t13 = space();
			create_component(media6.$$.fragment);
			t14 = space();
			hr6 = element("hr");
			t15 = space();
			create_component(media7.$$.fragment);
			t16 = space();
			hr7 = element("hr");
			t17 = space();
			div1 = element("div");
			footer = element("footer");
			t18 = text("© 2020 AZ | Software Developement");
			t19 = space();
			div0 = element("div");
			a0 = element("a");
			i0 = element("i");
			t20 = space();
			a1 = element("a");
			i1 = element("i");
			t21 = space();
			a2 = element("a");
			i2 = element("i");
			t22 = space();
			a3 = element("a");
			i3 = element("i");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-5oeyam\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			br = claim_element(nodes, "BR", {});
			t1 = claim_space(nodes);
			claim_component(media0.$$.fragment, nodes);
			t2 = claim_space(nodes);
			hr0 = claim_element(nodes, "HR", { class: true });
			t3 = claim_space(nodes);
			claim_component(media1.$$.fragment, nodes);
			t4 = claim_space(nodes);
			hr1 = claim_element(nodes, "HR", { class: true });
			t5 = claim_space(nodes);
			claim_component(media2.$$.fragment, nodes);
			t6 = claim_space(nodes);
			hr2 = claim_element(nodes, "HR", { class: true });
			t7 = claim_space(nodes);
			claim_component(media3.$$.fragment, nodes);
			t8 = claim_space(nodes);
			hr3 = claim_element(nodes, "HR", { class: true });
			t9 = claim_space(nodes);
			claim_component(media4.$$.fragment, nodes);
			t10 = claim_space(nodes);
			hr4 = claim_element(nodes, "HR", { class: true });
			t11 = claim_space(nodes);
			claim_component(media5.$$.fragment, nodes);
			t12 = claim_space(nodes);
			hr5 = claim_element(nodes, "HR", { class: true });
			t13 = claim_space(nodes);
			claim_component(media6.$$.fragment, nodes);
			t14 = claim_space(nodes);
			hr6 = claim_element(nodes, "HR", { class: true });
			t15 = claim_space(nodes);
			claim_component(media7.$$.fragment, nodes);
			t16 = claim_space(nodes);
			hr7 = claim_element(nodes, "HR", { class: true });
			t17 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			footer = claim_element(div1_nodes, "FOOTER", {});
			var footer_nodes = children(footer);
			t18 = claim_text(footer_nodes, "© 2020 AZ | Software Developement");
			footer_nodes.forEach(detach_dev);
			t19 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a0 = claim_element(div0_nodes, "A", { href: true, target: true, rel: true });
			var a0_nodes = children(a0);
			i0 = claim_element(a0_nodes, "I", { class: true });
			children(i0).forEach(detach_dev);
			a0_nodes.forEach(detach_dev);
			t20 = claim_space(div0_nodes);
			a1 = claim_element(div0_nodes, "A", { href: true, target: true, rel: true });
			var a1_nodes = children(a1);
			i1 = claim_element(a1_nodes, "I", { class: true });
			children(i1).forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			t21 = claim_space(div0_nodes);
			a2 = claim_element(div0_nodes, "A", { href: true, target: true, rel: true });
			var a2_nodes = children(a2);
			i2 = claim_element(a2_nodes, "I", { class: true });
			children(i2).forEach(detach_dev);
			a2_nodes.forEach(detach_dev);
			t22 = claim_space(div0_nodes);
			a3 = claim_element(div0_nodes, "A", { href: true, target: true, rel: true });
			var a3_nodes = children(a3);
			i3 = claim_element(a3_nodes, "I", { class: true });
			children(i3).forEach(detach_dev);
			a3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Projects";
			add_location(br, file$1, 31, 0, 400);
			attr_dev(hr0, "class", "style-one svelte-907jz6");
			add_location(hr0, file$1, 49, 0, 804);
			attr_dev(hr1, "class", "style-one svelte-907jz6");
			add_location(hr1, file$1, 66, 0, 1223);
			attr_dev(hr2, "class", "style-one svelte-907jz6");
			add_location(hr2, file$1, 85, 0, 1818);
			attr_dev(hr3, "class", "style-one svelte-907jz6");
			add_location(hr3, file$1, 106, 0, 2466);
			attr_dev(hr4, "class", "style-one svelte-907jz6");
			add_location(hr4, file$1, 127, 0, 3052);
			attr_dev(hr5, "class", "style-one svelte-907jz6");
			add_location(hr5, file$1, 149, 0, 3822);
			attr_dev(hr6, "class", "style-one svelte-907jz6");
			add_location(hr6, file$1, 168, 0, 4281);
			attr_dev(hr7, "class", "style-one svelte-907jz6");
			add_location(hr7, file$1, 185, 0, 4753);
			add_location(footer, file$1, 189, 14, 4819);
			attr_dev(i0, "class", "fab fa-linkedin-in fa-2x mr-2");
			add_location(i0, file$1, 191, 103, 5022);
			attr_dev(a0, "href", "https://www.linkedin.com/in/azdunek/");
			attr_dev(a0, "target", "_blank");
			attr_dev(a0, "rel", "noopener noreferrer");
			add_location(a0, file$1, 191, 14, 4933);
			attr_dev(i1, "class", "fab fa-twitter fa-2x ml-2");
			add_location(i1, file$1, 192, 99, 5171);
			attr_dev(a1, "href", "https://twitter.com/ZdunekAndrew");
			attr_dev(a1, "target", "_blank");
			attr_dev(a1, "rel", "noopener noreferrer");
			add_location(a1, file$1, 192, 14, 5086);
			attr_dev(i2, "class", "fab fa-github fa-2x ml-3");
			add_location(i2, file$1, 193, 94, 5311);
			attr_dev(a2, "href", "https://github.com/ajzdunek");
			attr_dev(a2, "target", "_blank");
			attr_dev(a2, "rel", "noopener noreferrer");
			add_location(a2, file$1, 193, 14, 5231);
			attr_dev(i3, "class", "fab fa-stack-overflow fa-2x ml-3");
			add_location(i3, file$1, 194, 114, 5470);
			attr_dev(a3, "href", "https://stackoverflow.com/users/9090178/azdunek");
			attr_dev(a3, "target", "_blank");
			attr_dev(a3, "rel", "noopener noreferrer");
			add_location(a3, file$1, 194, 14, 5370);
			attr_dev(div0, "class", "container py-3 text-center");
			add_location(div0, file$1, 190, 8, 4878);
			attr_dev(div1, "class", "az-sd py-3 svelte-907jz6");
			add_location(div1, file$1, 188, 2, 4780);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			mount_component(media0, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, hr0, anchor);
			insert_dev(target, t3, anchor);
			mount_component(media1, target, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, hr1, anchor);
			insert_dev(target, t5, anchor);
			mount_component(media2, target, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, hr2, anchor);
			insert_dev(target, t7, anchor);
			mount_component(media3, target, anchor);
			insert_dev(target, t8, anchor);
			insert_dev(target, hr3, anchor);
			insert_dev(target, t9, anchor);
			mount_component(media4, target, anchor);
			insert_dev(target, t10, anchor);
			insert_dev(target, hr4, anchor);
			insert_dev(target, t11, anchor);
			mount_component(media5, target, anchor);
			insert_dev(target, t12, anchor);
			insert_dev(target, hr5, anchor);
			insert_dev(target, t13, anchor);
			mount_component(media6, target, anchor);
			insert_dev(target, t14, anchor);
			insert_dev(target, hr6, anchor);
			insert_dev(target, t15, anchor);
			mount_component(media7, target, anchor);
			insert_dev(target, t16, anchor);
			insert_dev(target, hr7, anchor);
			insert_dev(target, t17, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, footer);
			append_dev(footer, t18);
			append_dev(div1, t19);
			append_dev(div1, div0);
			append_dev(div0, a0);
			append_dev(a0, i0);
			append_dev(div0, t20);
			append_dev(div0, a1);
			append_dev(a1, i1);
			append_dev(div0, t21);
			append_dev(div0, a2);
			append_dev(a2, i2);
			append_dev(div0, t22);
			append_dev(div0, a3);
			append_dev(a3, i3);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const media0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media0_changes.$$scope = { dirty, ctx };
			}

			media0.$set(media0_changes);
			const media1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media1_changes.$$scope = { dirty, ctx };
			}

			media1.$set(media1_changes);
			const media2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media2_changes.$$scope = { dirty, ctx };
			}

			media2.$set(media2_changes);
			const media3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media3_changes.$$scope = { dirty, ctx };
			}

			media3.$set(media3_changes);
			const media4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media4_changes.$$scope = { dirty, ctx };
			}

			media4.$set(media4_changes);
			const media5_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media5_changes.$$scope = { dirty, ctx };
			}

			media5.$set(media5_changes);
			const media6_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media6_changes.$$scope = { dirty, ctx };
			}

			media6.$set(media6_changes);
			const media7_changes = {};

			if (dirty & /*$$scope*/ 1) {
				media7_changes.$$scope = { dirty, ctx };
			}

			media7.$set(media7_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media0.$$.fragment, local);
			transition_in(media1.$$.fragment, local);
			transition_in(media2.$$.fragment, local);
			transition_in(media3.$$.fragment, local);
			transition_in(media4.$$.fragment, local);
			transition_in(media5.$$.fragment, local);
			transition_in(media6.$$.fragment, local);
			transition_in(media7.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media0.$$.fragment, local);
			transition_out(media1.$$.fragment, local);
			transition_out(media2.$$.fragment, local);
			transition_out(media3.$$.fragment, local);
			transition_out(media4.$$.fragment, local);
			transition_out(media5.$$.fragment, local);
			transition_out(media6.$$.fragment, local);
			transition_out(media7.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			destroy_component(media0, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(hr0);
			if (detaching) detach_dev(t3);
			destroy_component(media1, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(hr1);
			if (detaching) detach_dev(t5);
			destroy_component(media2, detaching);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(hr2);
			if (detaching) detach_dev(t7);
			destroy_component(media3, detaching);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(hr3);
			if (detaching) detach_dev(t9);
			destroy_component(media4, detaching);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(hr4);
			if (detaching) detach_dev(t11);
			destroy_component(media5, detaching);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(hr5);
			if (detaching) detach_dev(t13);
			destroy_component(media6, detaching);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(hr6);
			if (detaching) detach_dev(t15);
			destroy_component(media7, detaching);
			if (detaching) detach_dev(t16);
			if (detaching) detach_dev(hr7);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Projects> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Projects", $$slots, []);
	$$self.$capture_state = () => ({ Media });
	return [];
}

class Projects extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Projects",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Projects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdHMuYzc0ZmIwYzQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGVzdHJhcC9zcmMvTWVkaWEuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCBjbGFzc25hbWVzIGZyb20gJy4vdXRpbHMnO1xuXG4gIGxldCBjbGFzc05hbWUgPSAnJztcbiAgZXhwb3J0IHsgY2xhc3NOYW1lIGFzIGNsYXNzIH07XG4gIGV4cG9ydCBsZXQgYm9keSA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGJvdHRvbSA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGhlYWRpbmcgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBsZWZ0ID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgbGlzdCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IG1pZGRsZSA9IGZhbHNlO1xuICBleHBvcnQgbGV0IG9iamVjdCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHJpZ2h0ID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgdG9wID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgaHJlZiA9ICcnO1xuICBleHBvcnQgbGV0IHNyYyA9ICcnO1xuICBleHBvcnQgbGV0IGFsdCA9ICcnO1xuXG4gICQ6IGNsYXNzZXMgPSBjbGFzc25hbWVzKGNsYXNzTmFtZSwge1xuICAgICdtZWRpYS1ib2R5JzogYm9keSxcbiAgICAnbWVkaWEtaGVhZGluZyc6IGhlYWRpbmcsXG4gICAgJ21lZGlhLWxlZnQnOiBsZWZ0LFxuICAgICdtZWRpYS1yaWdodCc6IHJpZ2h0LFxuICAgICdtZWRpYS10b3AnOiB0b3AsXG4gICAgJ21lZGlhLWJvdHRvbSc6IGJvdHRvbSxcbiAgICAnbWVkaWEtbWlkZGxlJzogbWlkZGxlLFxuICAgICdtZWRpYS1vYmplY3QnOiBvYmplY3QsXG4gICAgJ21lZGlhLWxpc3QnOiBsaXN0LFxuICAgIG1lZGlhOlxuICAgICAgIWJvZHkgJiZcbiAgICAgICFoZWFkaW5nICYmXG4gICAgICAhbGVmdCAmJlxuICAgICAgIXJpZ2h0ICYmXG4gICAgICAhdG9wICYmXG4gICAgICAhYm90dG9tICYmXG4gICAgICAhbWlkZGxlICYmXG4gICAgICAhb2JqZWN0ICYmXG4gICAgICAhbGlzdFxuICB9KTtcbjwvc2NyaXB0PlxuXG57I2lmIGhlYWRpbmd9XG4gIDxoNCB7Li4uJCRyZXN0UHJvcHN9IGNsYXNzPXtjbGFzc2VzfT5cbiAgICA8c2xvdCAvPlxuICA8L2g0PlxuezplbHNlIGlmIGhyZWZ9XG4gIDxhIHsuLi4kJHJlc3RQcm9wc30gY2xhc3M9e2NsYXNzZXN9IHtocmVmfT5cbiAgICA8c2xvdCAvPlxuICA8L2E+XG57OmVsc2UgaWYgc3JjIHx8IG9iamVjdH1cbiAgPGltZyB7Li4uJCRyZXN0UHJvcHN9IGNsYXNzPXtjbGFzc2VzfSB7c3JjfSB7YWx0fSAvPlxuezplbHNlIGlmIGxpc3R9XG4gIDx1bCB7Li4uJCRyZXN0UHJvcHN9IGNsYXNzPXtjbGFzc2VzfT5cbiAgICA8c2xvdCAvPlxuICA8L3VsPlxuezplbHNlfVxuICA8ZGl2IHsuLi4kJHJlc3RQcm9wc30gY2xhc3M9e2NsYXNzZXN9PlxuICAgIDxzbG90IC8+XG4gIDwvZGl2Plxuey9pZn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OzttQ0F3RFcsR0FBVywwQkFBUyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttREFBM0IsR0FBVztpRUFBUyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FKNUIsR0FBVywwQkFBUyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttREFBM0IsR0FBVztpRUFBUyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFGMUIsR0FBVzt1QkFBUyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttREFBM0IsR0FBVzttREFBUyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQUo3QixHQUFXO3VCQUFTLEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21EQUEzQixHQUFXO2lFQUFTLEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FKMUIsR0FBVywwQkFBUyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttREFBM0IsR0FBVztpRUFBUyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQURoQyxHQUFPO2VBSUYsR0FBSTtjQUlKLEdBQUcsa0JBQUksR0FBTTtlQUViLEdBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztjQWhEUixTQUFTLEdBQUcsRUFBRTtPQUVQLElBQUksR0FBRyxLQUFLO09BQ1osTUFBTSxHQUFHLEtBQUs7T0FDZCxPQUFPLEdBQUcsS0FBSztPQUNmLElBQUksR0FBRyxLQUFLO09BQ1osSUFBSSxHQUFHLEtBQUs7T0FDWixNQUFNLEdBQUcsS0FBSztPQUNkLE1BQU0sR0FBRyxLQUFLO09BQ2QsS0FBSyxHQUFHLEtBQUs7T0FDYixHQUFHLEdBQUcsS0FBSztPQUNYLElBQUksR0FBRyxFQUFFO09BQ1QsR0FBRyxHQUFHLEVBQUU7T0FDUixHQUFHLEdBQUcsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUVoQixPQUFPLEdBQUcsVUFBVSxDQUFDLFNBQVM7SUFDL0IsWUFBWSxFQUFFLElBQUk7SUFDbEIsZUFBZSxFQUFFLE9BQU87SUFDeEIsWUFBWSxFQUFFLElBQUk7SUFDbEIsYUFBYSxFQUFFLEtBQUs7SUFDcEIsV0FBVyxFQUFFLEdBQUc7SUFDaEIsY0FBYyxFQUFFLE1BQU07SUFDdEIsY0FBYyxFQUFFLE1BQU07SUFDdEIsY0FBYyxFQUFFLE1BQU07SUFDdEIsWUFBWSxFQUFFLElBQUk7SUFDbEIsS0FBSyxHQUNGLElBQUksS0FDSixPQUFPLEtBQ1AsSUFBSSxLQUNKLEtBQUssS0FDTCxHQUFHLEtBQ0gsTUFBTSxLQUNOLE1BQU0sS0FDTixNQUFNLEtBQ04sSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
