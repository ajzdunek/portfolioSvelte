import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, B as create_slot, p as assign, o as compute_rest_props, v as validate_slots, r as exclude_internal_props, u as classnames, e as element, f as claim_element, g as children, b as detach_dev, C as set_attributes, k as add_location, l as insert_dev, J as listen_dev, D as update_slot, E as get_spread_update, A as transition_in, y as transition_out, K as bubble, w as empty, x as group_outros, z as check_outros, L as isObject, M as getColumnSizeClass, F as create_component, G as claim_component, H as mount_component, I as destroy_component, a as space, c as claim_space, t as text, h as claim_text, m as append_dev, n as noop } from './client.91a6228f.js';

/* node_modules/sveltestrap/src/Form.svelte generated by Svelte v3.24.1 */
const file = "node_modules/sveltestrap/src/Form.svelte";

function create_fragment(ctx) {
	let form;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let form_levels = [/*$$restProps*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let form_data = {};

	for (let i = 0; i < form_levels.length; i += 1) {
		form_data = assign(form_data, form_levels[i]);
	}

	const block = {
		c: function create() {
			form = element("form");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { class: true });
			var form_nodes = children(form);
			if (default_slot) default_slot.l(form_nodes);
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(form, form_data);
			add_location(form, file, 10, 0, 212);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);

			if (default_slot) {
				default_slot.m(form, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(form, "submit", /*submit_handler*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			set_attributes(form, form_data = get_spread_update(form_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["class","inline"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { class: className = "" } = $$props;
	let { inline = false } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Form", $$slots, ['default']);

	function submit_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ("inline" in $$new_props) $$invalidate(3, inline = $$new_props.inline);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ classnames, className, inline, classes });

	$$self.$inject_state = $$new_props => {
		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
		if ("inline" in $$props) $$invalidate(3, inline = $$new_props.inline);
		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	let classes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, inline*/ 12) {
			 $$invalidate(0, classes = classnames(className, inline ? "form-inline" : false));
		}
	};

	return [classes, $$restProps, className, inline, $$scope, $$slots, submit_handler];
}

class Form extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { class: 2, inline: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Form",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inline() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inline(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/FormGroup.svelte generated by Svelte v3.24.1 */
const file$1 = "node_modules/sveltestrap/src/FormGroup.svelte";

// (26:0) {:else}
function create_else_block(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let div_levels = [/*$$restProps*/ ctx[3], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[2] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$1, 26, 2, 601);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3],
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(26:0) {:else}",
		ctx
	});

	return block;
}

// (22:0) {#if tag === 'fieldset'}
function create_if_block(ctx) {
	let fieldset;
	let current;
	const default_slot_template = /*$$slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let fieldset_levels = [/*$$restProps*/ ctx[3], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[2] }];
	let fieldset_data = {};

	for (let i = 0; i < fieldset_levels.length; i += 1) {
		fieldset_data = assign(fieldset_data, fieldset_levels[i]);
	}

	const block = {
		c: function create() {
			fieldset = element("fieldset");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			fieldset = claim_element(nodes, "FIELDSET", { id: true, class: true });
			var fieldset_nodes = children(fieldset);
			if (default_slot) default_slot.l(fieldset_nodes);
			fieldset_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(fieldset, fieldset_data);
			add_location(fieldset, file$1, 22, 2, 515);
		},
		m: function mount(target, anchor) {
			insert_dev(target, fieldset, anchor);

			if (default_slot) {
				default_slot.m(fieldset, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			set_attributes(fieldset, fieldset_data = get_spread_update(fieldset_levels, [
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3],
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(fieldset);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(22:0) {#if tag === 'fieldset'}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*tag*/ ctx[1] === "fieldset") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const omit_props_names = ["class","row","check","inline","disabled","id","tag"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { class: className = "" } = $$props;
	let { row = false } = $$props;
	let { check = false } = $$props;
	let { inline = false } = $$props;
	let { disabled = false } = $$props;
	let { id = "" } = $$props;
	let { tag = null } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FormGroup", $$slots, ['default']);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("row" in $$new_props) $$invalidate(5, row = $$new_props.row);
		if ("check" in $$new_props) $$invalidate(6, check = $$new_props.check);
		if ("inline" in $$new_props) $$invalidate(7, inline = $$new_props.inline);
		if ("disabled" in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("tag" in $$new_props) $$invalidate(1, tag = $$new_props.tag);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		row,
		check,
		inline,
		disabled,
		id,
		tag,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ("className" in $$props) $$invalidate(4, className = $$new_props.className);
		if ("row" in $$props) $$invalidate(5, row = $$new_props.row);
		if ("check" in $$props) $$invalidate(6, check = $$new_props.check);
		if ("inline" in $$props) $$invalidate(7, inline = $$new_props.inline);
		if ("disabled" in $$props) $$invalidate(8, disabled = $$new_props.disabled);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("tag" in $$props) $$invalidate(1, tag = $$new_props.tag);
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	let classes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, row, check, inline, disabled*/ 496) {
			 $$invalidate(2, classes = classnames(className, row ? "row" : false, check ? "form-check" : "form-group", check && inline ? "form-check-inline" : false, check && disabled ? "disabled" : false));
		}
	};

	return [
		id,
		tag,
		classes,
		$$restProps,
		className,
		row,
		check,
		inline,
		disabled,
		$$scope,
		$$slots
	];
}

class FormGroup extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			class: 4,
			row: 5,
			check: 6,
			inline: 7,
			disabled: 8,
			id: 0,
			tag: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FormGroup",
			options,
			id: create_fragment$1.name
		});
	}

	get class() {
		throw new Error("<FormGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<FormGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get row() {
		throw new Error("<FormGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set row(value) {
		throw new Error("<FormGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get check() {
		throw new Error("<FormGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set check(value) {
		throw new Error("<FormGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inline() {
		throw new Error("<FormGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inline(value) {
		throw new Error("<FormGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<FormGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<FormGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<FormGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<FormGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tag() {
		throw new Error("<FormGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tag(value) {
		throw new Error("<FormGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Label.svelte generated by Svelte v3.24.1 */
const file$2 = "node_modules/sveltestrap/src/Label.svelte";

function create_fragment$2(ctx) {
	let label;
	let current;
	const default_slot_template = /*$$slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

	let label_levels = [
		/*$$restProps*/ ctx[3],
		{ id: /*id*/ ctx[1] },
		{ class: /*classes*/ ctx[2] },
		{ for: /*fore*/ ctx[0] }
	];

	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	const block = {
		c: function create() {
			label = element("label");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { id: true, class: true, for: true });
			var label_nodes = children(label);
			if (default_slot) default_slot.l(label_nodes);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(label, label_data);
			add_location(label, file$2, 70, 0, 1647);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);

			if (default_slot) {
				default_slot.m(label, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16384) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[14], dirty, null, null);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3],
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] },
				(!current || dirty & /*fore*/ 1) && { for: /*fore*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const omit_props_names = ["class","hidden","check","size","for","id","xs","sm","md","lg","xl","widths"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { class: className = "" } = $$props;
	let { hidden = false } = $$props;
	let { check = false } = $$props;
	let { size = "" } = $$props;
	let { for: fore = null } = $$props;
	let { id = "" } = $$props;
	let { xs = "" } = $$props;
	let { sm = "" } = $$props;
	let { md = "" } = $$props;
	let { lg = "" } = $$props;
	let { xl = "" } = $$props;
	const colWidths = { xs, sm, md, lg, xl };
	let { widths = Object.keys(colWidths) } = $$props;
	const colClasses = [];

	widths.forEach(colWidth => {
		let columnProp = $$props[colWidth];

		if (!columnProp && columnProp !== "") {
			return;
		}

		const isXs = colWidth === "xs";
		let colClass;

		if (isObject(columnProp)) {
			const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
			colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);

			colClasses.push(classnames({
				[colClass]: columnProp.size || columnProp.size === "",
				[`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || columnProp.order === 0,
				[`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || columnProp.offset === 0
			}));
		} else {
			colClass = getColumnSizeClass(isXs, colWidth, columnProp);
			colClasses.push(colClass);
		}
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Label", $$slots, ['default']);

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("hidden" in $$new_props) $$invalidate(5, hidden = $$new_props.hidden);
		if ("check" in $$new_props) $$invalidate(6, check = $$new_props.check);
		if ("size" in $$new_props) $$invalidate(7, size = $$new_props.size);
		if ("for" in $$new_props) $$invalidate(0, fore = $$new_props.for);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("xs" in $$new_props) $$invalidate(8, xs = $$new_props.xs);
		if ("sm" in $$new_props) $$invalidate(9, sm = $$new_props.sm);
		if ("md" in $$new_props) $$invalidate(10, md = $$new_props.md);
		if ("lg" in $$new_props) $$invalidate(11, lg = $$new_props.lg);
		if ("xl" in $$new_props) $$invalidate(12, xl = $$new_props.xl);
		if ("widths" in $$new_props) $$invalidate(13, widths = $$new_props.widths);
		if ("$$scope" in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		getColumnSizeClass,
		isObject,
		className,
		hidden,
		check,
		size,
		fore,
		id,
		xs,
		sm,
		md,
		lg,
		xl,
		colWidths,
		widths,
		colClasses,
		classes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(4, className = $$new_props.className);
		if ("hidden" in $$props) $$invalidate(5, hidden = $$new_props.hidden);
		if ("check" in $$props) $$invalidate(6, check = $$new_props.check);
		if ("size" in $$props) $$invalidate(7, size = $$new_props.size);
		if ("fore" in $$props) $$invalidate(0, fore = $$new_props.fore);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("xs" in $$props) $$invalidate(8, xs = $$new_props.xs);
		if ("sm" in $$props) $$invalidate(9, sm = $$new_props.sm);
		if ("md" in $$props) $$invalidate(10, md = $$new_props.md);
		if ("lg" in $$props) $$invalidate(11, lg = $$new_props.lg);
		if ("xl" in $$props) $$invalidate(12, xl = $$new_props.xl);
		if ("widths" in $$props) $$invalidate(13, widths = $$new_props.widths);
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	let classes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, hidden, check, size*/ 240) {
			 $$invalidate(2, classes = classnames(className, hidden ? "sr-only" : false, check ? "form-check-label" : false, size ? `col-form-label-${size}` : false, colClasses, colClasses.length ? "col-form-label" : false));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		fore,
		id,
		classes,
		$$restProps,
		className,
		hidden,
		check,
		size,
		xs,
		sm,
		md,
		lg,
		xl,
		widths,
		$$scope,
		$$slots
	];
}

class Label extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			class: 4,
			hidden: 5,
			check: 6,
			size: 7,
			for: 0,
			id: 1,
			xs: 8,
			sm: 9,
			md: 10,
			lg: 11,
			xl: 12,
			widths: 13
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Label",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hidden() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hidden(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get check() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set check(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get for() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set for(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xs() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xs(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sm() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sm(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get md() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set md(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lg() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lg(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xl() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xl(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get widths() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set widths(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/contact.svelte generated by Svelte v3.24.1 */
const file$3 = "src/routes/contact.svelte";

// (15:4) <Label for="exampleEmail">
function create_default_slot_32(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Plain Text (Static)");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Plain Text (Static)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_32.name,
		type: "slot",
		source: "(15:4) <Label for=\\\"exampleEmail\\\">",
		ctx
	});

	return block;
}

// (14:2) <FormGroup>
function create_default_slot_31(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleEmail",
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				plaintext: true,
				value: "Some plain text/ static value"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(14:2) <FormGroup>",
		ctx
	});

	return block;
}

// (19:4) <Label for="exampleEmail">
function create_default_slot_30(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Email");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Email");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(19:4) <Label for=\\\"exampleEmail\\\">",
		ctx
	});

	return block;
}

// (18:2) <FormGroup>
function create_default_slot_29(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleEmail",
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "email",
				name: "email",
				id: "exampleEmail",
				placeholder: "with a placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(18:2) <FormGroup>",
		ctx
	});

	return block;
}

// (27:4) <Label for="examplePassword">
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Password");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Password");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(27:4) <Label for=\\\"examplePassword\\\">",
		ctx
	});

	return block;
}

// (26:2) <FormGroup>
function create_default_slot_27(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "examplePassword",
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "password",
				name: "password",
				id: "examplePassword",
				placeholder: "password placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(26:2) <FormGroup>",
		ctx
	});

	return block;
}

// (35:4) <Label for="exampleUrl">
function create_default_slot_26(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Url");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Url");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(35:4) <Label for=\\\"exampleUrl\\\">",
		ctx
	});

	return block;
}

// (34:2) <FormGroup>
function create_default_slot_25(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleUrl",
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "url",
				name: "url",
				id: "exampleUrl",
				placeholder: "url placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(34:2) <FormGroup>",
		ctx
	});

	return block;
}

// (43:4) <Label for="exampleNumber">
function create_default_slot_24(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Number");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Number");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(43:4) <Label for=\\\"exampleNumber\\\">",
		ctx
	});

	return block;
}

// (42:2) <FormGroup>
function create_default_slot_23(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleNumber",
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "number",
				name: "number",
				id: "exampleNumber",
				placeholder: "number placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(42:2) <FormGroup>",
		ctx
	});

	return block;
}

// (51:4) <Label for="exampleDatetime">
function create_default_slot_22(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Datetime");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Datetime");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(51:4) <Label for=\\\"exampleDatetime\\\">",
		ctx
	});

	return block;
}

// (50:2) <FormGroup>
function create_default_slot_21(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleDatetime",
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "datetime",
				name: "datetime",
				id: "exampleDatetime",
				placeholder: "datetime placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(50:2) <FormGroup>",
		ctx
	});

	return block;
}

// (59:4) <Label for="exampleDate">
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Date");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Date");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(59:4) <Label for=\\\"exampleDate\\\">",
		ctx
	});

	return block;
}

// (58:2) <FormGroup>
function create_default_slot_19(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleDate",
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "date",
				name: "date",
				id: "exampleDate",
				placeholder: "date placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(58:2) <FormGroup>",
		ctx
	});

	return block;
}

// (67:4) <Label for="exampleTime">
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Time");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Time");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(67:4) <Label for=\\\"exampleTime\\\">",
		ctx
	});

	return block;
}

// (66:2) <FormGroup>
function create_default_slot_17(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleTime",
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "time",
				name: "time",
				id: "exampleTime",
				placeholder: "time placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(66:2) <FormGroup>",
		ctx
	});

	return block;
}

// (75:4) <Label for="exampleColor">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Color");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Color");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(75:4) <Label for=\\\"exampleColor\\\">",
		ctx
	});

	return block;
}

// (74:2) <FormGroup>
function create_default_slot_15(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleColor",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "color",
				name: "color",
				id: "exampleColor",
				placeholder: "color placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(74:2) <FormGroup>",
		ctx
	});

	return block;
}

// (83:4) <Label for="exampleSearch">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Search");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Search");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(83:4) <Label for=\\\"exampleSearch\\\">",
		ctx
	});

	return block;
}

// (82:2) <FormGroup>
function create_default_slot_13(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleSearch",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "search",
				name: "search",
				id: "exampleSearch",
				placeholder: "search placeholder"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(82:2) <FormGroup>",
		ctx
	});

	return block;
}

// (91:4) <Label for="exampleSelect">
function create_default_slot_12(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Select");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Select");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(91:4) <Label for=\\\"exampleSelect\\\">",
		ctx
	});

	return block;
}

// (92:4) <Input type="select" name="select" id="exampleSelect">
function create_default_slot_11(ctx) {
	let option0;
	let t0;
	let t1;
	let option1;
	let t2;
	let t3;
	let option2;
	let t4;
	let t5;
	let option3;
	let t6;
	let t7;
	let option4;
	let t8;

	const block = {
		c: function create() {
			option0 = element("option");
			t0 = text("1");
			t1 = space();
			option1 = element("option");
			t2 = text("2");
			t3 = space();
			option2 = element("option");
			t4 = text("3");
			t5 = space();
			option3 = element("option");
			t6 = text("4");
			t7 = space();
			option4 = element("option");
			t8 = text("5");
			this.h();
		},
		l: function claim(nodes) {
			option0 = claim_element(nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t0 = claim_text(option0_nodes, "1");
			option0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			option1 = claim_element(nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t2 = claim_text(option1_nodes, "2");
			option1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			option2 = claim_element(nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t4 = claim_text(option2_nodes, "3");
			option2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			option3 = claim_element(nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t6 = claim_text(option3_nodes, "4");
			option3_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			option4 = claim_element(nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t8 = claim_text(option4_nodes, "5");
			option4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option0.__value = "1";
			option0.value = option0.__value;
			add_location(option0, file$3, 92, 6, 2221);
			option1.__value = "2";
			option1.value = option1.__value;
			add_location(option1, file$3, 93, 6, 2246);
			option2.__value = "3";
			option2.value = option2.__value;
			add_location(option2, file$3, 94, 6, 2271);
			option3.__value = "4";
			option3.value = option3.__value;
			add_location(option3, file$3, 95, 6, 2296);
			option4.__value = "5";
			option4.value = option4.__value;
			add_location(option4, file$3, 96, 6, 2321);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option0, anchor);
			append_dev(option0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, option1, anchor);
			append_dev(option1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, option2, anchor);
			append_dev(option2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, option3, anchor);
			append_dev(option3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, option4, anchor);
			append_dev(option4, t8);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(option1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(option2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(option3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(option4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(92:4) <Input type=\\\"select\\\" name=\\\"select\\\" id=\\\"exampleSelect\\\">",
		ctx
	});

	return block;
}

// (90:2) <FormGroup>
function create_default_slot_10(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleSelect",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "select",
				name: "select",
				id: "exampleSelect",
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const input_changes = {};

			if (dirty & /*$$scope*/ 1) {
				input_changes.$$scope = { dirty, ctx };
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(90:2) <FormGroup>",
		ctx
	});

	return block;
}

// (111:4) <Label for="exampleText">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Text Area");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Text Area");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(111:4) <Label for=\\\"exampleText\\\">",
		ctx
	});

	return block;
}

// (110:2) <FormGroup>
function create_default_slot_8(ctx) {
	let label;
	let t;
	let input;
	let current;

	label = new Label({
			props: {
				for: "exampleText",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "textarea",
				name: "text",
				id: "exampleText"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(110:2) <FormGroup>",
		ctx
	});

	return block;
}

// (115:4) <Label for="exampleFile">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("File");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "File");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(115:4) <Label for=\\\"exampleFile\\\">",
		ctx
	});

	return block;
}

// (117:4) <FormText color="muted">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("This is some placeholder block-level help text for the above input. It's a\n      bit lighter and easily wraps to a new line.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "This is some placeholder block-level help text for the above input. It's a\n      bit lighter and easily wraps to a new line.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(117:4) <FormText color=\\\"muted\\\">",
		ctx
	});

	return block;
}

// (114:2) <FormGroup>
function create_default_slot_5(ctx) {
	let label;
	let t0;
	let input;
	let t1;
	let formtext;
	let current;

	label = new Label({
			props: {
				for: "exampleFile",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	input = new Input({
			props: {
				type: "file",
				name: "file",
				id: "exampleFile"
			},
			$$inline: true
		});

	formtext = new FormText({
			props: {
				color: "muted",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
			t0 = space();
			create_component(input.$$.fragment);
			t1 = space();
			create_component(formtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(input.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(formtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(input, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(formtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
			const formtext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formtext_changes.$$scope = { dirty, ctx };
			}

			formtext.$set(formtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			transition_in(formtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			transition_out(formtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(input, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(formtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(114:2) <FormGroup>",
		ctx
	});

	return block;
}

// (123:4) <Label check>
function create_default_slot_4(ctx) {
	let input;
	let t;
	let current;
	input = new Input({ props: { type: "radio" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
			t = text("\n      Option one is this and that—be sure to include why it's great");
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
			t = claim_text(nodes, "\n      Option one is this and that—be sure to include why it's great");
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(123:4) <Label check>",
		ctx
	});

	return block;
}

// (122:2) <FormGroup check>
function create_default_slot_3(ctx) {
	let label;
	let current;

	label = new Label({
			props: {
				check: true,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(122:2) <FormGroup check>",
		ctx
	});

	return block;
}

// (129:4) <Label check>
function create_default_slot_2(ctx) {
	let input;
	let t;
	let current;

	input = new Input({
			props: { type: "checkbox" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
			t = text("\n      Check me out");
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
			t = claim_text(nodes, "\n      Check me out");
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(129:4) <Label check>",
		ctx
	});

	return block;
}

// (128:2) <FormGroup check>
function create_default_slot_1(ctx) {
	let label;
	let current;

	label = new Label({
			props: {
				check: true,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(128:2) <FormGroup check>",
		ctx
	});

	return block;
}

// (13:0) <Form>
function create_default_slot(ctx) {
	let formgroup0;
	let t0;
	let formgroup1;
	let t1;
	let formgroup2;
	let t2;
	let formgroup3;
	let t3;
	let formgroup4;
	let t4;
	let formgroup5;
	let t5;
	let formgroup6;
	let t6;
	let formgroup7;
	let t7;
	let formgroup8;
	let t8;
	let formgroup9;
	let t9;
	let formgroup10;
	let t10;
	let formgroup11;
	let t11;
	let formgroup12;
	let t12;
	let formgroup13;
	let t13;
	let formgroup14;
	let current;

	formgroup0 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup1 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup2 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup3 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup4 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup5 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup6 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup7 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup8 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup9 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup10 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup11 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup12 = new FormGroup({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup13 = new FormGroup({
			props: {
				check: true,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formgroup14 = new FormGroup({
			props: {
				check: true,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formgroup0.$$.fragment);
			t0 = space();
			create_component(formgroup1.$$.fragment);
			t1 = space();
			create_component(formgroup2.$$.fragment);
			t2 = space();
			create_component(formgroup3.$$.fragment);
			t3 = space();
			create_component(formgroup4.$$.fragment);
			t4 = space();
			create_component(formgroup5.$$.fragment);
			t5 = space();
			create_component(formgroup6.$$.fragment);
			t6 = space();
			create_component(formgroup7.$$.fragment);
			t7 = space();
			create_component(formgroup8.$$.fragment);
			t8 = space();
			create_component(formgroup9.$$.fragment);
			t9 = space();
			create_component(formgroup10.$$.fragment);
			t10 = space();
			create_component(formgroup11.$$.fragment);
			t11 = space();
			create_component(formgroup12.$$.fragment);
			t12 = space();
			create_component(formgroup13.$$.fragment);
			t13 = space();
			create_component(formgroup14.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(formgroup0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(formgroup1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(formgroup2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(formgroup3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(formgroup4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(formgroup5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(formgroup6.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(formgroup7.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(formgroup8.$$.fragment, nodes);
			t8 = claim_space(nodes);
			claim_component(formgroup9.$$.fragment, nodes);
			t9 = claim_space(nodes);
			claim_component(formgroup10.$$.fragment, nodes);
			t10 = claim_space(nodes);
			claim_component(formgroup11.$$.fragment, nodes);
			t11 = claim_space(nodes);
			claim_component(formgroup12.$$.fragment, nodes);
			t12 = claim_space(nodes);
			claim_component(formgroup13.$$.fragment, nodes);
			t13 = claim_space(nodes);
			claim_component(formgroup14.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(formgroup0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(formgroup1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(formgroup2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(formgroup3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(formgroup4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(formgroup5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(formgroup6, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(formgroup7, target, anchor);
			insert_dev(target, t7, anchor);
			mount_component(formgroup8, target, anchor);
			insert_dev(target, t8, anchor);
			mount_component(formgroup9, target, anchor);
			insert_dev(target, t9, anchor);
			mount_component(formgroup10, target, anchor);
			insert_dev(target, t10, anchor);
			mount_component(formgroup11, target, anchor);
			insert_dev(target, t11, anchor);
			mount_component(formgroup12, target, anchor);
			insert_dev(target, t12, anchor);
			mount_component(formgroup13, target, anchor);
			insert_dev(target, t13, anchor);
			mount_component(formgroup14, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formgroup0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup0_changes.$$scope = { dirty, ctx };
			}

			formgroup0.$set(formgroup0_changes);
			const formgroup1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup1_changes.$$scope = { dirty, ctx };
			}

			formgroup1.$set(formgroup1_changes);
			const formgroup2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup2_changes.$$scope = { dirty, ctx };
			}

			formgroup2.$set(formgroup2_changes);
			const formgroup3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup3_changes.$$scope = { dirty, ctx };
			}

			formgroup3.$set(formgroup3_changes);
			const formgroup4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup4_changes.$$scope = { dirty, ctx };
			}

			formgroup4.$set(formgroup4_changes);
			const formgroup5_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup5_changes.$$scope = { dirty, ctx };
			}

			formgroup5.$set(formgroup5_changes);
			const formgroup6_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup6_changes.$$scope = { dirty, ctx };
			}

			formgroup6.$set(formgroup6_changes);
			const formgroup7_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup7_changes.$$scope = { dirty, ctx };
			}

			formgroup7.$set(formgroup7_changes);
			const formgroup8_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup8_changes.$$scope = { dirty, ctx };
			}

			formgroup8.$set(formgroup8_changes);
			const formgroup9_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup9_changes.$$scope = { dirty, ctx };
			}

			formgroup9.$set(formgroup9_changes);
			const formgroup10_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup10_changes.$$scope = { dirty, ctx };
			}

			formgroup10.$set(formgroup10_changes);
			const formgroup11_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup11_changes.$$scope = { dirty, ctx };
			}

			formgroup11.$set(formgroup11_changes);
			const formgroup12_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup12_changes.$$scope = { dirty, ctx };
			}

			formgroup12.$set(formgroup12_changes);
			const formgroup13_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup13_changes.$$scope = { dirty, ctx };
			}

			formgroup13.$set(formgroup13_changes);
			const formgroup14_changes = {};

			if (dirty & /*$$scope*/ 1) {
				formgroup14_changes.$$scope = { dirty, ctx };
			}

			formgroup14.$set(formgroup14_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formgroup0.$$.fragment, local);
			transition_in(formgroup1.$$.fragment, local);
			transition_in(formgroup2.$$.fragment, local);
			transition_in(formgroup3.$$.fragment, local);
			transition_in(formgroup4.$$.fragment, local);
			transition_in(formgroup5.$$.fragment, local);
			transition_in(formgroup6.$$.fragment, local);
			transition_in(formgroup7.$$.fragment, local);
			transition_in(formgroup8.$$.fragment, local);
			transition_in(formgroup9.$$.fragment, local);
			transition_in(formgroup10.$$.fragment, local);
			transition_in(formgroup11.$$.fragment, local);
			transition_in(formgroup12.$$.fragment, local);
			transition_in(formgroup13.$$.fragment, local);
			transition_in(formgroup14.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formgroup0.$$.fragment, local);
			transition_out(formgroup1.$$.fragment, local);
			transition_out(formgroup2.$$.fragment, local);
			transition_out(formgroup3.$$.fragment, local);
			transition_out(formgroup4.$$.fragment, local);
			transition_out(formgroup5.$$.fragment, local);
			transition_out(formgroup6.$$.fragment, local);
			transition_out(formgroup7.$$.fragment, local);
			transition_out(formgroup8.$$.fragment, local);
			transition_out(formgroup9.$$.fragment, local);
			transition_out(formgroup10.$$.fragment, local);
			transition_out(formgroup11.$$.fragment, local);
			transition_out(formgroup12.$$.fragment, local);
			transition_out(formgroup13.$$.fragment, local);
			transition_out(formgroup14.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formgroup0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(formgroup1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(formgroup2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(formgroup3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(formgroup4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(formgroup5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(formgroup6, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(formgroup7, detaching);
			if (detaching) detach_dev(t7);
			destroy_component(formgroup8, detaching);
			if (detaching) detach_dev(t8);
			destroy_component(formgroup9, detaching);
			if (detaching) detach_dev(t9);
			destroy_component(formgroup10, detaching);
			if (detaching) detach_dev(t10);
			destroy_component(formgroup11, detaching);
			if (detaching) detach_dev(t11);
			destroy_component(formgroup12, detaching);
			if (detaching) detach_dev(t12);
			destroy_component(formgroup13, detaching);
			if (detaching) detach_dev(t13);
			destroy_component(formgroup14, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(13:0) <Form>",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let form;
	let current;

	form = new Form({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(form.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(form.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(form, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const form_changes = {};

			if (dirty & /*$$scope*/ 1) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(form, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Contact> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Contact", $$slots, []);
	$$self.$capture_state = () => ({ Form, FormGroup, Label });
	return [];
}

class Contact extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Contact",
			options,
			id: create_fragment$3.name
		});
	}
}

export default Contact;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
